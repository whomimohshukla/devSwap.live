name: Server Deploy to EC2

on:
  push:
    branches: [ main, master ]
    paths:
      - 'server/**'
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy Backend to EC2
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Deploy to EC2 Server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: 22
        timeout: 300s
        script: |
          set -e
          
          echo "🚀 DevSwap.live Backend Deployment Started"
          echo "Timestamp: $(date)"
          
          # Navigate to project directory
          cd ~/devSwap.live/server 2>/dev/null || cd ~/Desktop/DevSwap.live/server || {
            echo "❌ Project directory not found. Trying to clone..."
            cd ~
            if [ ! -d "devSwap.live" ] && [ ! -d "Desktop/DevSwap.live" ]; then
              git clone https://github.com/whomimohshukla/devSwap.live.git
              cd devSwap.live/server
            else
              echo "❌ Cannot find project directory"
              exit 1
            fi
          }
          
          echo "📍 Current directory: $(pwd)"
          
          # Pull latest changes
          echo "📥 Pulling latest changes..."
          git fetch origin
          git reset --hard origin/main 2>/dev/null || git reset --hard origin/master
          
          # Stop existing containers
          echo "🛑 Stopping existing containers..."
          sudo docker-compose down --timeout 30 || true
          
          # Clean up
          echo "🧹 Cleaning up old images..."
          sudo docker system prune -f || true
          
          # Build and start services
          echo "🏗️ Building and starting services..."
          sudo docker-compose build --no-cache devswap-backend || sudo docker-compose build --no-cache
          sudo docker-compose up -d
          
          # Wait for services
          echo "⏳ Waiting for services to start..."
          sleep 45
          
          # Health check
          echo "🏥 Running health check..."
          HEALTH_CHECK_PASSED=false
          
          for i in {1..10}; do
            echo "Health check attempt $i/10..."
            
            if curl -f -s http://localhost:5000/api/health > /dev/null; then
              echo "✅ Health check passed!"
              HEALTH_STATUS=$(curl -s http://localhost:5000/api/health | jq -r '.status' 2>/dev/null || echo "responding")
              echo "Health status: $HEALTH_STATUS"
              HEALTH_CHECK_PASSED=true
              break
            else
              echo "⏳ API not ready yet, waiting 15s..."
              sleep 15
            fi
          done
          
          if [ "$HEALTH_CHECK_PASSED" = false ]; then
            echo "❌ Health check failed after 10 attempts"
            echo "📋 Container status:"
            sudo docker-compose ps
            echo "📋 Backend logs:"
            sudo docker-compose logs --tail=50 devswap-backend || sudo docker-compose logs --tail=50
            exit 1
          fi
          
          # Final status
          echo "📊 Deployment Status:"
          sudo docker-compose ps
          echo ""
          echo "🌐 API Health:"
          curl -s http://localhost:5000/api/health || echo "API responding but no JSON"
          echo ""
          echo "🎉 Backend deployment completed successfully!"

    - name: Test External Access
      run: |
        echo "🌍 Testing external API access..."
        sleep 30
        if curl -f -s http://${{ secrets.EC2_HOST }}:5000/api/health > /dev/null; then
          echo "✅ External API is accessible"
        else
          echo "⚠️ External API may not be accessible (check Security Group)"
        fi

    - name: Deployment Summary
      if: always()
      run: |
        echo "🚀 DevSwap.live Backend Deployment Summary"
        echo "=========================================="
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
          echo "🔗 API Health: http://${{ secrets.EC2_HOST }}:5000/api/health"
        else
          echo "❌ Deployment failed!"
          echo "Check the logs above for details."
        fi
        echo "Timestamp: $(date)"
